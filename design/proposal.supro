service Datclub3 {
  rpc verifyUserIdentity: {1 message: string} -> {1 echo: string}

  rpc verifyUserIdentity: Req -> Res where
    // 생성될 메시지의 이름을 특별히 지정
    Req = VerifyUserIdentityReq {1 message: string},
    // 이름을 별도로 지정하지 않으면 알아서 생성 (VerifyUserIdentityRes)
    Res = {1 echo: string}

  rpc signInByFirebaseAuth: {1 firebase_id_token: string} -> {
    1 auth_token: string
    2 refresh_token: string
    3 refresh_token_expire_time: google.protobuf.Timestamp
    4 private_user_data: com.giyeok.datclub3.proto.UserData
    5 is_new_user: bool
  }

  rpc renewAuthToken: {
    1 auth_token: string
    2 refresh_token: string
  } -> {
    1 auth_token: string
    2 refresh_token_expire_time: string
    3 private_user_data: com.giyeok.datclub3.proto.UserData
  }

  rpc streamingMethod: {} -> stream<sealed StreamingEvent {
    1 open: {
      1 open_file: string
    }
    2 close: {
      1 close_file: string
    }
  }>
}

message Hello {
  1 hello: string
  2 echo: string
  3 good: string
  4 list: repeated<string>
  // double_list같은 경우 protobuf에서 지원하지 않는 타입
  // repeated<string>을 갖는 별도의 메시지를 자동으로 정의해서 처리해줄 수 있긴 하지만.. 일단은 그냥 오류 발생하는게 나을듯
  10 double_list: repeated<repeated<string>>
  5 opt: optional<repeated<string>>
  // nullable_list도 역시 protobuf에서 그냥은 지원되지 않는 타입
  // optional<string>을 저장하기 위한 타입을 별도로 만들어야될텐데.. 일단은 그냥 오류 발생하는게 나을듯
  11 nullable_list: repeated<optional<string>>
  6 map: map<string, google.protobuf.Empty>
  7 unnamed_type: {
    1 name: string
    2 value: string
  }

  oneof oneof_type {
    8 hello: string
    9 good: string
  }
}

sealed Ast {
  // on-the-fly 메시지 타입 정의. 이름은 { 앞에 써서 강제로 지정할 수도 있고, 안하면 알아서 적당히 생성(e.g. AstBinOp)
  1 bin_op: {
    1 op: string
    2 lhs: Ast
    3 rhs: Ast
  }
  2 un_op: {
    1 op: string
    2 operand: Ast
  }
  3 literal: sealed {
    1 string_literal: string
    2 int_literal: string
    3 float_literal: string
  }
  // backtick을 쓰면 키워드도 이름으로 사용 가능
  4 sealed: `sealed` {

  }
}

// sealed message는 아래와 같은 경우를 좀더 쉽게 쓰고, 코드도 sealed class 로 생성해줌
message Ast {
  oneof ast {
    1 bin_op: {}
    2 un_op: {}
    3 literal: AstLiteral
  }
}

message AstLiteral {
  oneof literal {
    string string_literal = 1;
    string int_literal = 2;
    string float_literal = 3;
  }
}


String[]
Repeated<String>
Optional<String>
Map<String, String>

sugar protocol buffer
suprobuf
.supro


double
float
int32
int64
uint32
uint64
sint32
sint64
fixed32
fixed64
sfixed32
sfixed64
bool
string
bytes
