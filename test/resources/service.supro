package com.giyeok.datclub3.api

import "google/protobuf/timestamp.proto"
import "dao.proto"

option java_outer_classname = "ServiceProto"

// 댓클럽3 서비스
service Datclub3 {
  // 헬로 월드
  rpc helloWorld: HelloWorldReq {1 message: string} -> HelloWorldRes

  // 굿 월드
  rpc signInByFirebaseAuth: {
    1 firebase_id_token: string
  } -> {
    1 auth_token: string [packed=true]
    2 refresh_token: string
    3 refresh_token_expire_time: google.protobuf.Timestamp
    4 private_user_data: com.giyeok.datclub3.proto.UserData
    4 is_new_user: bool
  }

  rpc renewAuthToken: {
    1 auth_token: string
    2 refresh_token: string
  } -> {
    1 auth_token: string
    2 refresh_token_expire_time: google.protobuf.Timestamp
    3 private_user_data: com.giyeok.datclub3.proto.UserData
  }

  rpc renewRefreshToken: {
    1 auth_token: string
    2 refresh_token: string
  } -> {
    1 refresh_token: string
    2 refresh_token_expire_time: google.protobuf.Timestamp
  }

  rpc signOut: {
    1 auth_token: string
    2 refresh_token: string
  } -> {}

  rpc verifyUserIdentity: Req -> Res where
    Req = VerifyUserIdentityReq {1 message: string},
    Res = {1 echo: string}
}

message HelloWorldRes {
  1 echo: string
}

sealed Ast {
  // on-the-fly 메시지 타입 정의. 이름은 { 앞에 써서 강제로 지정할 수도 있고, 안하면 알아서 적당히 생성(e.g. AstBinOp)
  1 bin_op: {
    1 op: string
    2 lhs: Ast
    3 rhs: Ast
  }
  2 un_op: {
    1 op: string
    2 operand: Ast
  }
  3 literal: sealed {
    1 string_literal: string
    2 int_literal: string
    3 float_literal: string
  }
  // backtick을 쓰면 키워드도 이름으로 사용 가능
  4 sealed: `sealed` {
  }
  // 이름이 별도로 지정되지 않은 빈 메시지는 google.protobuf.Empty가 됨.
  // 위의 sealed는 이름이 지정되었기 때문에 google.protobuf.Empty가 되지 않음.
  5 empty: {}
}

message MyMessage {
  1 rep: repeated<string>
  2 opt: optional<string>
}

message MyMessage {
  1 reprep: repeated<{1 rep: repeated<string>}>
  2 optrep: optional<{1 rep: repeated<string>}>
}

service MyService {
  rpc listenEvents: stream<{1 target: string}> -> stream<sealed {
    1 opened: {1 name: string}
    2 closed: {1 name: string}
    3 shutdown: {}
  }>
}

service MyService {
  rpc helloWorld: HelloWorldReq -> HelloWorldRes
}

message Message1 {
  1 my_map: map<string, {1 on_the_fly: string}>
}

message ParentMessage {
  option msgOption = "true?"

  message NestedMessage {
    option msgOption = "true?"
    1 good: string
  }

  enum MyEnum {
    option hello = true
    1 HELLO [good = "hello", bad = "bye"]
    2 GOOD
  }
}

enum MyEnum {
  -1 HELLO
  -2 GOOD
}

service EnumService {
  rpc hello: {
    1 question: string
    2 question_type: enum {0 NORMAL, 1 SEARCH}
  } -> {1 answer: string}
}

message Reserved {
  reserved(2, 5, hello, 9..12, 15..max)
}
