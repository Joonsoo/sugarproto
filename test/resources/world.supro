package com.giyeok.msspgame.world.proto

option java_outer_classname = "WorldProto"

message World {
  // random_seed는 랜덤값을 생성할 때마다 변경되므로 (아마도) 저장될 때마다 이 값은 변경된다.
  // 랜덤 생성은 항상 on demand로 하고, 한 번 랜덤하게 생성되고 나면 그 값은 저장되고 고정되어 시뮬레이션에 반영된다.
  // 다만 추후에 최적화를 위해서 정말 아무 일도 없는 chunk에 대해서는 시뮬레이션 범위에서 제외하고 최소한의 정보만 압축해서 저장했다 필요할 때 꺼내서 사용하는 방식을 사용할 수도 있다.
  1 random_seed: int64
  2 current_timestamp: Timestamp
  // chunk_y -> TileChunkRow
  3 tile_chunk_rows: map<sint32, TileChunkRow>
  // TODO water mass와 water flow..?
  // water mass id -> water mass
  4 water_masses: map<int32, WaterMass>
  5 user_character: HumanCharacter
  // character id -> character
  6 employees: map<int32, HumanCharacter>
  7 known_recipes: repeated<Recipe>
  8 camera: Camera
  9 simulation: {
    // 시뮬레이션 관련 수치들
    1 time_paused: bool
  }
  // 사용자가 지시한 작업 내용들
  // 이들은 건물 상세 정보등에 들어가지 않고, 월드 자체를 변경하는 오퍼레이션들만 표현한다.
  10 tasks_queue: repeated<sealed WorldTask {
    common 1 task_id: int32
    common 2 create_time: Timestamp
    3 modify_terrain: {
      // 지형 수정
      1 tile_point: TilePoint
      2 target_level: int32
      // 진행 상황. 이걸 어떻게 묘사할지는 아직 잘.. man-days 같은게 들어가야될듯
      3 progress: float
    }
    4 plant: {
      // 식물 심기
      1 tile_point: TilePoint
      2 resource_type: ResourceType
      3 progress: float
    }
    5 harvest: {
      // 식물 수확. 해당 타일에 지정된 식물 종류를 모두 채집한다
      1 tile_point: TilePoint
      2 resource_type: repeated<ResourceType>
      3 progress: float
    }
    6 collect_resource: {
      // 자원 채집. 식물 수확과의 차이는 amount 유무
      1 tile_point: TilePoint
      2 resource_type: ResourceType
      3 amount: int32
      4 progress: float
    }
    7 construct_building: {
      // 건물 짓기
      // 건물 짓기 명령을 내리면 그 즉시 building id가 할당되고 chunk에 데이터가 추가된다
      // 건물 ID는 글로벌하게 찾기 어렵기 때문에 chunk point를 함께 저장해서 관리한다
      1 chunk_point: ChunkPoint
      2 building_id: int32
      // 진행 상황. 이걸 어떻게 묘사할지는 아직 잘.. man-days 같은게 들어가야될듯
      3 progress: float
    }
    8 repair_building: {
      1 chunk_point: ChunkPoint
      2 building_id: int32
      // 진행 상황. 이걸 어떻게 묘사할지는 아직 잘.. man-days 같은게 들어가야될듯
      3 progress: float
    }
    9 empty_task: {}
  }>
  // TODO 알림, 날씨
}

message TileChunkRow {
  // chunk_x -> TileChunk
  1 tile_chunks: map<sint32, TileChunk>
}

message TileChunk {
  // chunk는 가로 세로 32 x 32 타일 단위로 묶어놓은 관리 단위
  // chunk 위치. 처음 게임이 시작하는 위치가 (0, 0) chunk의 (0, 0)이고 화면에 보이는 기준 왼쪽은 x-1, 오른쪽은 x+1, 위쪽은 y-1, 아래쪽은 y+1
  1 chunk_x: sint32
  2 chunk_y: sint32
  // chunk에 속한 타일들의 속성. 한 청크에는 반드시 32 x 32 = 1024 개의 타일이 포함되므로 tiles의 길이는 항상 1024이고,
  // 가장 윗 줄부터 아래쪽으로, 한 줄 안에서는 왼쪽 위부터 오른쪽 순서로 저장된다.
  3 tiles: repeated<Tile>
  4 natural_objects: repeated<NaturalObject>
  5 animals: repeated<Animal>
  6 buildings: repeated<Building>
  7 vehicles: repeated<Vehicle>
  8 ground_items: repeated<GroundItem>
}

message Tile {
  1 type: TileType
  // 타일의 왼쪽 위 level 단위
  // 타일 사이의 level은 불연속적일 수 없기 때문에 각 타일의 왼쪽 위 레벨만 저장하고,
  // 왼쪽 아래, 오른쪽 위, 오른쪽 아래 레벨은 인접 타일의 값을 참고한다
  // level값은 가장 바닥이 0이고 높아질수록 숫자가 커진다.
  // 1의 level은 타일 가로 세로 폭의 1/32로 한다.
  2 lt_level: int32
  3 water: optional<{
    1 water_mass_id: int32
    2 water_level: int32
    3 water_micro_level: int32
  }>
  // 잔여 자원 매장량.
  // natural object 중 자원이 될 수 있는 것들이 있는데, 이 resouces 필드는 그것들과 무관하게 땅 자체의 매장량을 나타낸다. 즉, 지하 자원
  // 그래서 어떤 타일의 총 자원 매장량을 계산하려면 이 resources 필드와 그 타일에 속한 natural object의 resources를 합산해야한다.
  // 이렇게 하는 이유는 1. natural object가 큰 돌덩이같이 1 x 1보다 큰 객체일 수 있기 때문, 2. 나무처럼 시간이 지나면서 상태가 변화하는 경우를 잘 모델링하기 위함
  // 지하 자원은 건물이 닿을 수 없는 엄청나게 깊은 곳에 있다고 가정해서 지형 변경과는 무관하다고 가정
  4 resources: Resources
  // 타일에 설치된 도로 인프라
  5 road_infra: optional<{
    // 도로가 설치된 경우 도로 타입
    1 road_type_id: int32
    // 도로 내구성
    2 durability: int32
    // 도로에 설치된 애드온. 가로등 등
    3 equips: repeated<RoadEquip {
      1 equip_type_id: int32
    }>
  }>
  // 이 타일에 올려져 있는 건물, 캐릭터, 아이템.
  // 크기가 1 x 1 보다 큰 객체의 경우 왼쪽, 왼쪽 위, 위쪽 타일에 속한 아이템이나 건물의 id가 포함될 수도 있다.
  // 다만 어떤 경우에도 아이템이나 건물의 크기가 32 x 32 보다 클 수는 없기 때문에 그 외의 타일들을 고려할 필요는 없다.
  6 building_ids: set<int32>
  7 character_ids: set<int32>
  8 ground_item_ids: set<int32>
}

enum TileType {
  0 GRASS
  1 DIRT
}

message WaterMass {
  1 water_mass_id: int32
  // 물 덩어리의 부피.
  // 이 부피를 실제 타일에 저장된 water_level과 water_micro_level을 바탕으로 계산한 실제 부피와 얼추 비슷하게 유지되도록
  // 타일의 water level을 변경해주어야 한다.
  // 즉 각 타일의 water level은 water mass의 volume과 일치하도록 변경해야 하고 + 주변 타일의 수위와 동일하게 유지되도록 시뮬레이션
  2 volume: double
  3 shape: repeated<TilePoint>
  // 지형의 변경으로 인해 물이 새는 지점들. 어떻게 계산할 지는 아직 잘 모르겠음..
  4 leakage: repeated<TilePoint>
}

message ChunkPoint { 1 x: sint32, 2 y: sint32 }

message TilePoint { 1 x: sint32, 2 y: sint32 }

// MicroPoint는 타일 내에서의 위치. 타일을 가로 세로 32 개씩 쪼갠 위치
message MicroPoint { 1 x: sint32, 2 y: sint32 }

message Resources {
  // 밀, 쌀, 콩, 나무처럼 시간이 지나면서 늘어나거나 줄어드는 자원들은
  1 wheat: int32
  2 rice: int32
  3 bean: int32
  // 나무 매장량
  4 tree: int32
  // 돌 매장량
  5 stone: int32
  // 철
  6 iron: int32
  // 구리
  7 copper: int32
  // 금
  8 gold: int32
  // 은
  9 silver: int32
  // 원유 매장량
  10 oil: int32
  // TODO 새로운 자원들 추가
}

enum ResourceType {
  0 WHEAT
  1 RICE
  2 BEAN
  3 TREE
  4 STONE
  5 IRON
  6 COPPER
  7 GOLD
  8 SILVER
  9 OIL
}

message HumanCharacter {
  1 character_id: int32
  2 name: string
  3 character_type_id: int32
  // 캐릭터의 위치. (chunk의 위치와 무관한) 전체 지도 좌표계에서의 위치를 나타낸다.
  4 tile_point: TilePoint
  5 micro_point: MicroPoint
  // 현재 탈 것에 타고 있는 경우 탈것의 id. 0이면 안 타고 있다는 의미
  6 vehicle_id: int32
  // 현재 이동중이면 이동 목적지
  7 moving_state: optional<MovingState {
    // 최종 목적지
    1 destination: TilePoint
    // 이동 목적지까지의 계획 경로
    2 path: repeated<TilePoint>
  }>
  // 캐릭터의 특성. 현재 상태와 무관하게 캐릭터가 가진 본질적 특성
  8 props: {
    1 max_hp: int32
    // TODO 필요시 새로운 스탯 추가
  }
  // 현재 상태. props에 의해 영향을 받는 현재 상태
  9 stats: {
    1 hp: int32
    2 stamina: int32
    3 hunger: int32
    4 thirstiness: int32
    5 mood: int32
    // TODO 필요시 새로운 스탯 추가 e.g. 피곤함, 기분 좋음, 병 걸림 등
  }
  // 만족도
  // 만족도는 주기적으로 업데이트되고, 만족도가 특정 범위 안에 있으면 결혼을 해서 출산을 하거나 가족을 초청한다.
  // 만족도가 너무 낮아지면 행성을 떠난다.
  10 satisfactions: {
    // 거주 만족도
    1 house_sat: int32
    // 음식 만족도
    2 food_sat: int32
    // 유흥 만족도
    3 fun_sat: int32
    // TODO relation_sat: int32
  }
  // TODO 인간 관계
  reserved(11)

  12 inventory: Inventory

  // TODO 계획중인 할 일
  // TODO 업무 스케쥴
}

message Inventory {
  // 최대 적재량
  1 max_load: int32
  // 달러 단위. 0.01 달러 단위. 즉 100 cash == 1달러.
  2 cash: int32
  3 items: repeated<InventoryItem {
    1 item: Item
    2 count: int32
  }>
}

message Item {
  // 아이템 종류 id
  1 item_type_id: int32

  2 stats: sealed ItemStats {
    // 여기부터는 아이템의 상태
    // 자원 등의 경우 별도의 상태가 없음
    1 no_props: {}
    // 내구도. 도끼 등에 설정된다. 단위는 아직 미정
    2 durability: int32
    // 총, 대포, 화살 등에 장전된 탄환
    3 weapon: WeaponStats { 1 shots: repeated<Item> }
    // 총알, 대포알, 화살 등의 경우 사용되었는지 여부
    4 shot_used: bool
    // 음식 등의 경우 조리 혹은 소비해야 하는 시한
    5 expires: Timestamp
  }
}

// 게임 시작 시간 이후 지난 시간. 게임 시작 시간을 0.0초로 보고 정상 속도 진행 기준으로 실제 시간 1초 진행시 1초 증가.
// 실제 시간 2초가 게임 내에서 하루. 게임 내에서 1년은 360일. 그래서 실제 시간 1분 == 게임 내 한달, 720초(=12분) == 게임 내에서 1년
// 다만 사람들이 2초마다 출/퇴근하고 하면 이상하니까, 사람들의 생활 패턴은 한달(실제 시간 1분)을 하루처럼 사용.
// 그리고 사람들이 너무 오래 자면 게임 내에선 이상하니까 일하는 시간 4:노는 시간 1:자는 시간 1 정도로 하면 적당하지 않을까?
// 40초 일하고 10초 놀고 10초 자고 다시 출근하고.. 출퇴근 시간은 노는 시간과 자는 시간에서 빼고..
message Timestamp {
  1 seconds: int32
  2 millis: int32
}

// 바닥에 떨어져 있는 아이템. 아이템은 지도상에서는 항상 작은 아이콘으로 표시
message GroundItem {
  1 item_id: int32
  // 아이템의 위치. (chunk의 위치와 무관한) 전체 지도 좌표계에서의 위치를 나타낸다.
  2 tile_point: TilePoint
  3 micro_point: MicroPoint
  4 item: Item
}

// 자연물
message NaturalObject {
  1 item_id: int32
  // 물체의 위치. (chunk의 위치와 무관한) 전체 지도 좌표계에서의 위치를 나타낸다.
  // 크기가 1 * 1 이상인 경우 가장 왼쪽 위 위치를 나타낸다.
  2 tile_point: TilePoint
  // 객체의 종류
  3 item_type_id: int32
  // 해당 객체가 포함한 자원
  // 돌이나 나무 등의 경우 잔여 자원에 따라 상태가 변경될 수 있다.
  4 resources: Resources
  // 식물인 경우 생장 상태
  5 growth_stat: optional<PlantGrowthStat {
    1 stage: PlantGrowthStage
    // 현재 상태에서 다음 단계로 가기 위한 점수.
    // 점수가 몇 점이 되어야 다음 단계로 가는지는 식물에 따라 다름
    2 stage_score: int32
  }>
}

enum PlantGrowthStage {
  // 휴면, 발아, 성숙, 개화, 결실, 노화
  // dormancy, germination, maturation, flowering, fruiting, aging
  0 DORMANCY
  1 GERMINATION
  2 MATURATION
  3 FLOWRING
  4 FRUITING
  5 AGING
}

message Animal {
  1 character_id: int32
  2 animal_type_id: int32
  // 현재 동물의 위치. (chunk의 위치와 무관한) 전체 지도 좌표계에서의 위치를 나타낸다.
  // 크기가 1 * 1 이상인 경우 가장 왼쪽 위 위치를 나타낸다.
  3 tile_point: TilePoint
  4 micro_point: MicroPoint
  5 props: AnimalProps {
    1 max_hp: int32
  }
  6 stats: AnimalStats {
    1 hp: int32
  }
  // TODO 생장 상태
}

message Building {
  1 building_id: int32
  // 빌딩 종류
  2 building_type_id: int32
  // 현재 건물의 위치. (chunk의 위치와 무관한) 전체 지도 좌표계에서의 위치를 나타낸다.
  // 크기가 1 * 1 이상인 경우 가장 왼쪽 위 위치를 나타낸다.
  3 lt_tile_point: TilePoint
  // 빌딩이 설치된 높이. 빌딩은 농장 등의 특별한 경우를 제외하면 모두 평평한 땅에 설치된다.
  4 level: int32
  5 props: {
    1 max_hp: int32
  }
  6 stats: {
    1 hp: int32
  }
  7 unique_stats: sealed {
    // TODO
    1 storage_building: StorageBuildingStats {
      1 equips: BuildingEquips
    }
    2 factory_building: FactoryBuildingStats {
      1 equips: BuildingEquips
    }
  }
  // TODO 자동화 빌딩이거나 생산 빌딩인 경우 빌딩의 생산 기능과 관련된 필드
  // TODO 공격 빌딩인 경우 shots
}

message BuildingEquips {
  // 빌딩에 장착된 아이템
  1 items: repeated<Item>
}

message Vehicle {
  1 vehicle_id: int32
  2 vehicle_type_id: int32
  3 tile_point: TilePoint
  4 micro_point: MicroPoint
  5 props: {
    1 max_hp: int32
  }
  6 stats: {
    1 hp: int32
  }
  // fuel_tank는 기본적으로 inventory와 동일하지만 특정 시점에만 내용물을 채우거나 뺄 수 있다.
  7 fuel_tank: Inventory
  8 fuel_stat: VehicleFuelStat {
    // fuel_stat의 left가 0이 되면 fuel_tank에서 사용 가능한 연료를 하나 갖고오고,
    // 탈 것과 연료의 효율을 곱한 만큼 left가 충전된다.
    // left는 별도의 단위로 추후 정의하기로 한다.
    1 item: Item
    2 left: int32
  }
  9 inventory: Inventory
}

message Recipe {
  // 제작판의 크기
  1 width: int32
  2 height: int32
  // 제작판의 배치. 길이가 항상 width * height
  3 tiles: repeated<RecipeItem {
    1 item_type_id: int32
    2 count: int32
  }>
}

message Camera {
  // 화면의 중심이 될 지점. center_tile로 나타나는 타일의 center_micro_x, center_micro_y로 나타나는 마이크로 타일의 elevation 지점
  1 center_tile: TilePoint
  // center_micro_x와 center_micro_y는 MicroPoint와 동일한 scale이지만, 자연스러운 스크롤을 위해서 float으로
  2 center_micro_x: float
  3 center_micro_y: float
  4 elevation: float
  // zoom은 가로에 몇 개의 타일이 보일지로 표현. 어차피 fog가 있기 때문에 zoom은 게임 플레이에 영향을 주지 못함
  5 zoom: float
}
