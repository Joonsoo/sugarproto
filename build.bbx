package com.giyeok.sugarproto

import file
import jvm
import maven
from bibix.plugins import scala
from bibix.plugins import ktjvm
from bibix.plugins import java
import git("https://github.com/Joonsoo/jparser.git") as jparser
from bibix.plugins import protobuf

proto3Parser {
  parserGen = jparser.genKtAstMgroup2(
    cdgFile = "grammar/proto3.cdg",
    astifierClassName = "com.giyeok.sugarproto.Proto3Ast",
    parserDataFileName = "proto3-mg2-parserdata.pb",
  )

  action generate {
    file.clearDirectory("proto3Parser/generated/kotlin")
    file.clearDirectory("proto3Parser/generated/resources")
    file.copyDirectory(parserGen.srcsRoot, "proto3Parser/generated/kotlin")
    file.copyFile(parserGen.parserData, "proto3Parser/generated/resources")
  }

  generated = ktjvm.library(
    srcs = glob("proto3Parser/generated/kotlin/**/*.kt"),
    deps = [jparser.ktparser.main],
    resources = [
      "proto3Parser/generated/resources/proto3-mg2-parserdata.pb"
    ]
  )

  main = ktjvm.library(
    srcs = glob("proto3Parser/main/kotlin/**/*.kt"),
    deps = [proto3Parser.generated],
  )

  test = ktjvm.library(
    srcs = glob("proto3Parser/test/kotlin/**/*.kt"),
    deps = [proto3Parser.main, ...testDeps],
  )
}

parser {
  parserGen = jparser.genKtAstMgroup2(
    cdgFile = "grammar/sugarproto.cdg",
    astifierClassName = "com.giyeok.sugarproto.SugarProtoAst",
    parserDataFileName = "sugarproto-mg2-parserdata.pb",
  )

  action generate {
    file.clearDirectory("parser/generated/kotlin")
    file.clearDirectory("parser/generated/resources")
    file.copyDirectory(parserGen.srcsRoot, "parser/generated/kotlin")
    file.copyFile(parserGen.parserData, "parser/generated/resources")
  }

  generated = ktjvm.library(
    srcs = glob("parser/generated/kotlin/**/*.kt"),
    deps = [jparser.ktparser.main],
    resources = [
      "parser/generated/resources/sugarproto-mg2-parserdata.pb"
    ]
  )

  main = ktjvm.library(
    srcs = glob("parser/main/kotlin/**/*.kt"),
    deps = [parser.generated],
  )

  test = ktjvm.library(
    srcs = glob("parser/test/kotlin/**/*.kt"),
    deps = [parser.main, ...testDeps],
  )
}

main = ktjvm.library(
  srcs = glob("main/kotlin/**/*.kt"),
  deps = [parser.main, proto3Parser.main],
)

test = ktjvm.library(
  srcs = glob("test/kotlin/**/*.kt"),
  resources = glob("test/resources/**"),
  deps = [main, ...testDeps],
)

testDeps = [
  maven.artifact("org.junit.jupiter", "junit-jupiter-api", "5.8.2"),
  maven.artifact("com.google.truth", "truth", "1.1.5"),
  maven.artifact("org.jetbrains.kotlin", "kotlin-test", "1.9.21"),
]

// proto3 -> typescript compiler
proto3ts {
  main = ktjvm.library(
    srcs = glob("proto3ts/main/kotlin/**/*.kt"),
    deps = [proto3Parser.main],
  )

  test = ktjvm.library(
    srcs = glob("proto3ts/test/kotlin/**/*.kt"),
    deps = [proto3ts.main, ...testDeps],
  )
}

sugarformat {
  parser {
    parserGen = jparser.genKtAstMgroup2(
      cdgFile = "grammar/sugarformat.cdg",
      astifierClassName = "com.giyeok.sugarproto.SugarFormatAst",
      parserDataFileName = "sugarformat-mg2-parserdata.pb",
    )

    durationParserGen = jparser.genKtAstMgroup2(
      cdgFile = "grammar/duration.cdg",
      astifierClassName = "com.giyeok.sugarproto.SugarFormatDurationAst",
      parserDataFileName = "duration-mg2-parserdata.pb",
    )

    action generate {
      file.clearDirectory("sugarformat/generated/kotlin")
      file.clearDirectory("sugarformat/generated/resources")
      file.copyDirectory(parserGen.srcsRoot, "sugarformat/generated/kotlin")
      file.copyFile(parserGen.parserData, "sugarformat/generated/resources")
      file.copyDirectory(durationParserGen.srcsRoot, "sugarformat/generated/kotlin")
      file.copyFile(durationParserGen.parserData, "sugarformat/generated/resources")
    }

    generated = ktjvm.library(
      srcs = glob("sugarformat/generated/kotlin/**/*.kt"),
      deps = [jparser.ktparser.main],
      resources = [
        "sugarformat/generated/resources/sugarformat-mg2-parserdata.pb",
        "sugarformat/generated/resources/duration-mg2-parserdata.pb",
      ]
    )
  }

  main = ktjvm.library(
    srcs = glob("sugarformat/main/kotlin/**/*.kt"),
    deps = [
      parser.generated,
      maven.artifact("com.google.protobuf", "protobuf-java-util", "3.25.0"),
    ],
  )

  test = ktjvm.library(
    srcs = glob("sugarformat/test/kotlin/**/*.kt"),
    deps = [
      main,
      ...testDeps,
      testProto.javalib,
    ],
  )

  testProto {
    schema = protobuf.schema(glob("sugarformat/test/proto/**/*.proto"))
    protoJava = protobuf.java(schema)

    javalib = java.library(
      srcs = glob("sugarformat/test/java/**.java"),
      deps = [
        maven.artifact("com.google.protobuf", "protobuf-java", "3.25.0")
      ]
    )

    action generate {
      file.copyDirectory(protoJava.rootDir, "sugarformat/test/java")
    }
  }
}

bibixPlugin {
  impl = ktjvm.library(
    srcs = glob("bibixPlugin/kotlin/**/*.kt"),
    deps = [bibix.base, main]
  )

  test {
    service = generateProto(
      source = "test/resources/service.supro",
      filename = "service.proto",
    )

    typeConversions {
      gen = generateMutableKtAndProto(
        source = "test/resources/type_conversions.supro",
        protoFileName = "test.proto",
        kotlinFileName = "TypeConversionsModel.kt",
        imports = [
          "com.giyeok.sugarproto.test.TypeConversionsProto",
        ],
      )
      protoSchema = protobuf.schema([gen.protoFile])
      protoJava = protobuf.java(protoSchema)

      action generate {
        file.copyFile(gen.protoFile, "test/generated/proto")
        file.copyDirectory(protoJava.rootDir, "test/generated/java")
        file.copyDirectory(gen.srcsRoot, "test/generated/kotlin")
      }
    }
  }
}

def generateProto(
  source: file,
  filename: string,
  protoDirs?: set<directory>,
): file = bibixPlugin.impl:com.giyeok.sugarproto.bibixPlugin.GenerateProto

class Generated(
  srcsRoot: directory,
  protoFile: file,
)

def generateMutableKtAndProto(
  source: file,
  protoFileName: string,
  kotlinFileName: string,
  imports?: list<string>,
  protoDirs: set<directory> = [],
  gdxMode: boolean = false,
): Generated = bibixPlugin.impl:com.giyeok.sugarproto.bibixPlugin.GenerateMutableKtAndProto

tsProto {
  compiler = ktjvm.library(
    srcs = glob("tsProto/compiler/**.kt"),
    deps = [proto3Parser.main],
  )

  test = ktjvm.library(
    srcs = glob("tsProto/compilerTest/main/**.kt"),
    resources = glob("tsProto/compilerTest/resources/**.kt"),
    deps = [
      compiler,
      ...testDeps,
      java.library(
        srcs=protobuf.java(protobuf.schema(glob("tsProto/compilerTest/resources/*.proto"))),
        deps=[
          maven.artifact("com.google.protobuf", "protobuf-java", "3.25.0"),
        ],
      ),
    ],
  )
}

from bibix.plugins import grpc

// proto3 -> kotlin multi platform + ktor3
proto3kmp {
  main = ktjvm.library(
    srcs = glob("proto3kmp/main/kotlin/**.kt"),
    deps = [
      proto3Parser.main,
      pblib,
    ]
  )

  protobufVersion = "3.25.0"
  grpcVersion = "1.59.0"

  protoSchema = protobuf.schema(["proto3kmp/grpcresearch/proto/test.proto"])
  protoJava = protobuf.java(protoSchema)
  protoKotlin = protobuf.kotlin(protoSchema)
  grpcJava = grpc.java(protoSchema)
  grpcKotlin = grpc.kotlin(protoSchema)

  action generateTestProto {
    file.clearDirectory("proto3kmp/grpcresearch/generated/java")
    file.copyDirectory(protoJava.rootDir, "proto3kmp/grpcresearch/generated/java")
    file.copyDirectory(grpcJava.rootDir, "proto3kmp/grpcresearch/generated/java")

    file.clearDirectory("proto3kmp/grpcresearch/generated/kotlin")
    file.copyDirectory(protoKotlin.rootDir, "proto3kmp/grpcresearch/generated/kotlin")
    file.copyDirectory(grpcKotlin.rootDir, "proto3kmp/grpcresearch/generated/kotlin")
  }

  generatedJava = java.library(
    srcs = glob("proto3kmp/grpcresearch/generated/java/**.java"),
    deps = [
      maven.artifact("com.google.protobuf", "protobuf-java", protobufVersion),
      maven.artifact("com.google.protobuf", "protobuf-java-util", protobufVersion),
      maven.artifact("io.grpc", "grpc-api", grpcVersion),
      maven.artifact("io.grpc", "grpc-services", grpcVersion),
      maven.artifact("io.grpc", "grpc-core", grpcVersion),
      maven.artifact("io.grpc", "grpc-stub", grpcVersion),
      maven.artifact("io.grpc", "grpc-netty-shaded", grpcVersion),
      maven.artifact("javax.annotation", "javax.annotation-api", "1.3.2"),
    ],
  )

  generatedKotlin = ktjvm.library(
    srcs = glob("proto3kmp/grpcresearch/generated/kotlin/**.kt"),
    deps = [
      generatedJava,
      maven.artifact("com.google.protobuf", "protobuf-kotlin", protobufVersion),
      maven.artifact("io.grpc", "grpc-kotlin-stub", "1.4.1"),
    ],
  )

  pblib = ktjvm.library(
    srcs = glob("proto3kmp/pblib/kotlin/**.kt"),
    deps = [
      maven.artifact("io.ktor", "ktor-client-core-jvm", ktor_version),
    ]
  )

  ktor_version = "3.0.1"
  ktxCoroutinesVersion = "1.7.0"
  grpcresearch = ktjvm.library(
    srcs = glob("proto3kmp/grpcresearch/kotlin/**.kt"),
    deps = [
      generatedKotlin,
      pblib,
      maven.artifact("io.ktor", "ktor-client-core-jvm", ktor_version),
      maven.artifact("io.ktor", "ktor-client-okhttp-jvm", ktor_version),
      maven.artifact("io.ktor", "ktor-client-cio-jvm", ktor_version),
      maven.artifact("io.ktor", "ktor-server-core-jvm", ktor_version),
      maven.artifact("io.ktor", "ktor-server-jetty-jakarta-jvm", ktor_version),
      maven.artifact("com.squareup.okhttp3", "okhttp", "4.12.0"),
      maven.artifact("org.jetbrains.kotlinx", "kotlinx-coroutines-core", ktxCoroutinesVersion),
      maven.artifact("org.jetbrains.kotlinx", "kotlinx-coroutines-core-jvm", ktxCoroutinesVersion),
      maven.artifact("org.jetbrains.kotlinx", "kotlinx-coroutines-jdk9", ktxCoroutinesVersion),
    ]
  )

  test = ktjvm.library(
    srcs = glob("proto3kmp/test/kotlin/**.kt"),
    deps = [main, ...testDeps]
  )
}
